{"remainingRequest":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js??ref--3-1!/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/app/clientEntry.js","dependencies":[{"path":"/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/app/clientEntry.js","mtime":1553541624643},{"path":"/home/jimmy/Project/rssdocs/node_modules/cache-loader/dist/cjs.js","mtime":1553541563194},{"path":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js","mtime":1553541563099}],"contextDependencies":[],"result":["import \"core-js/modules/es6.promise\";\n\n/* global BASE_URL, GA_ID, ga, SW_ENABLED, VUEPRESS_VERSION, LAST_COMMIT_HASH*/\nimport { createApp } from './app';\nimport SWUpdateEvent from './SWUpdateEvent';\nimport { register } from 'register-service-worker';\n\nvar _createApp = createApp(),\n    app = _createApp.app,\n    router = _createApp.router;\n\nwindow.__VUEPRESS_VERSION__ = {\n  version: VUEPRESS_VERSION,\n  hash: LAST_COMMIT_HASH // Google analytics integration\n\n};\n\nif (process.env.NODE_ENV === 'production' && GA_ID) {\n  (function (i, s, o, g, r, a, m) {\n    i['GoogleAnalyticsObject'] = r;\n\n    i[r] = i[r] || function () {\n      (i[r].q = i[r].q || []).push(arguments);\n    };\n\n    i[r].l = 1 * new Date();\n    a = s.createElement(o);\n    m = s.getElementsByTagName(o)[0];\n    a.async = 1;\n    a.src = g;\n    m.parentNode.insertBefore(a, m);\n  })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');\n\n  ga('create', GA_ID, 'auto');\n  ga('send', 'pageview');\n  router.afterEach(function (to) {\n    ga('set', 'page', app.$withBase(to.fullPath));\n    ga('send', 'pageview');\n  });\n}\n\nrouter.onReady(function () {\n  app.$mount('#app'); // Register service worker\n\n  if (process.env.NODE_ENV === 'production' && SW_ENABLED && window.location.protocol === 'https:') {\n    register(\"\".concat(BASE_URL, \"service-worker.js\"), {\n      ready: function ready() {\n        console.log('[vuepress:sw] Service worker is active.');\n        app.$refs.layout.$emit('sw-ready');\n      },\n      cached: function cached(registration) {\n        console.log('[vuepress:sw] Content has been cached for offline use.');\n        app.$refs.layout.$emit('sw-cached', new SWUpdateEvent(registration));\n      },\n      updated: function updated(registration) {\n        console.log('[vuepress:sw] Content updated.');\n        app.$refs.layout.$emit('sw-updated', new SWUpdateEvent(registration));\n      },\n      offline: function offline() {\n        console.log('[vuepress:sw] No internet connection found. App is running in offline mode.');\n        app.$refs.layout.$emit('sw-offline');\n      },\n      error: function error(err) {\n        console.error('[vuepress:sw] Error during service worker registration:', err);\n        app.$refs.layout.$emit('sw-error', err);\n\n        if (GA_ID) {\n          ga('send', 'exception', {\n            exDescription: err.message,\n            exFatal: false\n          });\n        }\n      }\n    });\n  }\n});",null]}