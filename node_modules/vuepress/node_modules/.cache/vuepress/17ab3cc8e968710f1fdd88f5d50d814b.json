{"remainingRequest":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js??ref--3-1!/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/app/SWUpdateEvent.js","dependencies":[{"path":"/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/app/SWUpdateEvent.js","mtime":1553541624643},{"path":"/home/jimmy/Project/rssdocs/node_modules/cache-loader/dist/cjs.js","mtime":1553541563194},{"path":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js","mtime":1553541563099}],"contextDependencies":[],"result":["import \"core-js/modules/es6.object.define-property\";\nimport _classCallCheck from \"/home/jimmy/Project/rssdocs/node_modules/@babel/runtime/helpers/builtin/es6/classCallCheck\";\nimport _createClass from \"/home/jimmy/Project/rssdocs/node_modules/@babel/runtime/helpers/builtin/es6/createClass\";\n\nvar SWUpdateEvent =\n/*#__PURE__*/\nfunction () {\n  function SWUpdateEvent(registration) {\n    _classCallCheck(this, SWUpdateEvent);\n\n    Object.defineProperty(this, 'registration', {\n      value: registration,\n      configurable: true,\n      writable: true\n    });\n  }\n  /**\n   * Check if the new service worker exists or not.\n   */\n\n\n  _createClass(SWUpdateEvent, [{\n    key: \"update\",\n    value: function update() {\n      return this.registration.update();\n    }\n    /**\n     * Activate new service worker to work 'location.reload()' with new data.\n     */\n\n  }, {\n    key: \"skipWaiting\",\n    value: function skipWaiting() {\n      var worker = this.registration.waiting;\n\n      if (!worker) {\n        return Promise.resolve();\n      }\n\n      console.log('[vuepress:sw] Doing worker.skipWaiting().');\n      return new Promise(function (resolve, reject) {\n        var channel = new MessageChannel();\n\n        channel.port1.onmessage = function (event) {\n          console.log('[vuepress:sw] Done worker.skipWaiting().');\n\n          if (event.data.error) {\n            reject(event.data.error);\n          } else {\n            resolve(event.data);\n          }\n        };\n\n        worker.postMessage({\n          type: 'skip-waiting'\n        }, [channel.port2]);\n      });\n    }\n  }]);\n\n  return SWUpdateEvent;\n}();\n\nexport { SWUpdateEvent as default };",null]}