{"remainingRequest":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js??ref--3-1!/home/jimmy/Project/rssdocs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/jimmy/Project/rssdocs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/jimmy/Project/rssdocs/node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue","mtime":1553541624643},{"path":"/home/jimmy/Project/rssdocs/node_modules/cache-loader/dist/cjs.js","mtime":1553541563194},{"path":"/home/jimmy/Project/rssdocs/node_modules/babel-loader/lib/index.js","mtime":1553541563099},{"path":"/home/jimmy/Project/rssdocs/node_modules/cache-loader/dist/cjs.js","mtime":1553541563194},{"path":"/home/jimmy/Project/rssdocs/node_modules/vue-loader/lib/index.js","mtime":1553541567371}],"contextDependencies":[],"result":["import _typeof from \"/home/jimmy/Project/rssdocs/node_modules/@babel/runtime/helpers/builtin/es6/typeof\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    updateEvent: {\n      type: Object,\n      default: null\n    }\n  },\n  computed: {\n    popupConfig: function popupConfig() {\n      var _arr = [this.$themeLocaleConfig, this.$site.themeConfig];\n\n      for (var _i = 0; _i < _arr.length; _i++) {\n        var config = _arr[_i];\n        var sw = config.serviceWorker;\n\n        if (sw && sw.updatePopup) {\n          return _typeof(sw.updatePopup) === 'object' ? sw.updatePopup : {};\n        }\n      }\n\n      return null;\n    },\n    enabled: function enabled() {\n      return Boolean(this.popupConfig && this.updateEvent);\n    },\n    message: function message() {\n      var c = this.popupConfig;\n      return c && c.message || 'New content is available.';\n    },\n    buttonText: function buttonText() {\n      var c = this.popupConfig;\n      return c && c.buttonText || 'Refresh';\n    }\n  },\n  methods: {\n    reload: function reload() {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(function () {\n          location.reload(true);\n        });\n        this.updateEvent = null;\n      }\n    }\n  }\n};",{"version":3,"sources":["node_modules/vuepress/lib/default-theme/SWUpdatePopup.vue"],"names":["props","updateEvent","type","Object","default","computed","popupConfig","$themeLocaleConfig","$site","themeConfig","config","sw","serviceWorker","updatePopup","enabled","Boolean","message","c","buttonText","methods","reload","skipWaiting","then","location"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,eAAe;AACbA,SAAO;AACLC,iBAAa;AACXC,YAAMC,MADK;AAEXC,eAAS;AAFE;AADR,GADM;AAQbC,YAAU;AACRC,eADQ,yBACO;AAAA,iBACQ,CAAC,KAAKC,kBAAN,EAA0B,KAAKC,KAAL,CAAWC,WAArC,CADR;;AACb,+CAAwE;AAAnE,YAAMC,iBAAN;AACH,YAAMC,KAAKD,OAAOE,aAAlB;;AACA,YAAID,MAAMA,GAAGE,WAAb,EAA0B;AACxB,iBAAO,QAAOF,GAAGE,WAAV,MAA0B,QAA1B,GAAqCF,GAAGE,WAAxC,GAAsD,EAA7D;AACD;AACF;;AACD,aAAO,IAAP;AACD,KATO;AAWRC,WAXQ,qBAWG;AACT,aAAOC,QAAQ,KAAKT,WAAL,IAAoB,KAAKL,WAAjC,CAAP;AACD,KAbO;AAeRe,WAfQ,qBAeG;AACT,UAAMC,IAAI,KAAKX,WAAf;AACA,aAAQW,KAAKA,EAAED,OAAR,IAAoB,2BAA3B;AACD,KAlBO;AAoBRE,cApBQ,wBAoBM;AACZ,UAAMD,IAAI,KAAKX,WAAf;AACA,aAAQW,KAAKA,EAAEC,UAAR,IAAuB,SAA9B;AACD;AAvBO,GARG;AAkCbC,WAAS;AACPC,UADO,oBACG;AACR,UAAI,KAAKnB,WAAT,EAAsB;AACpB,aAAKA,WAAL,CAAiBoB,WAAjB,GAA+BC,IAA/B,CAAoC,YAAM;AACxCC,mBAASH,MAAT,CAAgB,IAAhB;AACD,SAFD;AAGA,aAAKnB,WAAL,GAAmB,IAAnB;AACD;AACF;AARM;AAlCI,CAAf","sourceRoot":"/home/jimmy/Project/rssdocs","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    updateEvent: {\n      type: Object,\n      default: null\n    }\n  },\n\n  computed: {\n    popupConfig () {\n      for (const config of [this.$themeLocaleConfig, this.$site.themeConfig]) {\n        const sw = config.serviceWorker\n        if (sw && sw.updatePopup) {\n          return typeof sw.updatePopup === 'object' ? sw.updatePopup : {}\n        }\n      }\n      return null\n    },\n\n    enabled () {\n      return Boolean(this.popupConfig && this.updateEvent)\n    },\n\n    message () {\n      const c = this.popupConfig\n      return (c && c.message) || 'New content is available.'\n    },\n\n    buttonText () {\n      const c = this.popupConfig\n      return (c && c.buttonText) || 'Refresh'\n    }\n  },\n\n  methods: {\n    reload () {\n      if (this.updateEvent) {\n        this.updateEvent.skipWaiting().then(() => {\n          location.reload(true)\n        })\n        this.updateEvent = null\n      }\n    }\n  }\n}\n"]}]}